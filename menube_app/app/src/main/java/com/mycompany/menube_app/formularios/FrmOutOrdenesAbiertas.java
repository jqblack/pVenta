/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.menube_app.formularios;

import FuncionesGenerales.Funciones;
import FuncionesGenerales.WebServices;
import FuncionesGenerales.datos_preferencias;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/**
 *
 * @author Usuario
 */
public class FrmOutOrdenesAbiertas extends javax.swing.JFrame {

    /**
     * Creates new form FrmOutComandas
     */
    private boolean desea_no_salir = false;

    public FrmOutOrdenesAbiertas() {
        initComponents();
       
        llenar_botones();
    }
    
     public FrmOutOrdenesAbiertas(boolean  no_salir) {
        initComponents();
       desea_no_salir = no_salir;
        llenar_botones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panel_botones_ordenes = new javax.swing.JPanel();
        salir = new javax.swing.JButton();
        recargar_categorias = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane1ComponentResized(evt);
            }
        });

        panel_botones_ordenes.setBackground(new java.awt.Color(255, 255, 255));
        panel_botones_ordenes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jScrollPane1.setViewportView(panel_botones_ordenes);

        salir.setBackground(new java.awt.Color(255, 0, 0));
        salir.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        salir.setForeground(new java.awt.Color(255, 255, 255));
        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salir.png"))); // NOI18N
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        recargar_categorias.setBackground(new java.awt.Color(0, 153, 51));
        recargar_categorias.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        recargar_categorias.setForeground(new java.awt.Color(255, 255, 255));
        recargar_categorias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recargar.png"))); // NOI18N
        recargar_categorias.setText("Recargar ");
        recargar_categorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recargar_categoriasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 821, Short.MAX_VALUE)
                .addComponent(recargar_categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recargar_categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(8, 8, 8))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here:
        eventoSalir();
    }//GEN-LAST:event_salirActionPerformed

    private void jScrollPane1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane1ComponentResized
        // TODO add your handling code here:
        panel_botones_ordenes.setBounds(jScrollPane1.getBounds());
        addReorganizarBotones();
    }//GEN-LAST:event_jScrollPane1ComponentResized

    private void recargar_categoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recargar_categoriasActionPerformed
        // TODO add your handling code here:
        llenar_botones();
    }//GEN-LAST:event_recargar_categoriasActionPerformed

    /**
     * @param args the command line arguments
     */
    Funciones funciones = new Funciones();
    WebServices webServices = new WebServices();

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmOutOrdenesAbiertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmOutOrdenesAbiertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmOutOrdenesAbiertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmOutOrdenesAbiertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmOutOrdenesAbiertas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel_botones_ordenes;
    private javax.swing.JButton recargar_categorias;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables

    public void llenar_botones() {

        int contador = 1;
        int acumulador_heiht = 0;
        int top = 0;
        int i = 0;
        //int width = 210;
        int columnas = 4;
        int separacion = 3;
        int width = panel_botones_ordenes.getWidth() / columnas;
        width = width - separacion;
        int heiht = 200;
        eliminar_botones();
        Map map;
        List<Map<String, Object>> map1;
        String respuesta = "";
        try {
            respuesta = webServices.buscar("", "ws/get_ordenes_today");
            if (!respuesta.equals("")) {

                map = funciones.JsonToMap(respuesta);
                map1 = funciones.JsonToListMap(map.get("f_data"));
                for (Map tupla : map1) {
                    JButton button1 = new JButton();
                    String tipo = "";
                    if (tupla.get("f_modulo").toString().equals("1")) {
                        tipo = "<strong>Empresarial</strong><br>";
                    }
                    if (tupla.get("f_modulo").toString().equals("2")) {
                        tipo = "<strong>Restaurante</strong><br>";
                    }
                    if (tupla.get("f_modulo").toString().equals("3")) {
                        tipo = "<strong>Delivery</strong><br>";
                    }
                    button1.setText("<html>" + tipo + "Orden# : " + tupla.get("f_wholenum").toString() + "<br> Mesa# :" + tupla.get("f_nombre_mesa") + "</html>");
                    //button1.setBackground(new Color(255, 255, 0));
                    button1.setBackground(funciones.getRandomColor());
                    button1.setFont(new Font("Tahoma", 1, 14));
                    button1.setName(tupla.get("f_idrecord").toString()+";"+tupla.get("f_modulo").toString());
                    button1.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            eventoMostrarComanda(button1.getName());
                        }
                    });
                    if (contador == 1 && i == 0) {
                        panel_botones_ordenes.add(button1, new AbsoluteConstraints(0, 0, width, heiht));
                       acumulador_heiht += width + separacion;
                    } else {
                        panel_botones_ordenes.add(button1, new AbsoluteConstraints(acumulador_heiht, top, width, heiht));
                       acumulador_heiht += width + separacion;
                    }
                    if (contador == columnas) {
                        contador = 1;
                        acumulador_heiht = 0;
                        top += heiht;
                    } else {
                        contador++;
                    }
                    i++;
                    panel_botones_ordenes.repaint();
                    panel_botones_ordenes.revalidate();
                }
            }
        } catch (Exception ex) {
            System.err.println("Punto venta ==>  addBotonesCategorias =>" + ex.getMessage());
        }
    }

    public void eventoMostrarComanda(String idrecord) {
        FrmOutDataOrdenAbierta frm = new FrmOutDataOrdenAbierta(this, true,idrecord);
        frm.setVisible(true);
    }

    public void eliminar_botones() {
        panel_botones_ordenes.removeAll();
        panel_botones_ordenes.repaint();
    }

    public void eventoSalir() {

        
        if (desea_no_salir) {
            dispose();
        }else{
            if (funciones.mensajeConfirmacion("Desea Salir del sistema", "", JOptionPane.YES_NO_OPTION) == 1) {
            return;
        }

        String respuesta = "";
        try {
            respuesta = webServices.buscar("", "ws/logout");
            if (!respuesta.equals("")) {

            }
        } catch (Exception e) {
            System.err.println("Error en salir punto venta en el metodo logout" + e.getMessage());
        }

        dispose();
        FrmLogin login = new FrmLogin();
        login.setVisible(true);
        login.setTitle("Login de Usuario");
        login.getContentPane().setBackground(new Color(64, 149, 191));
        }
        
    }

    public void addReorganizarBotones() {

        int contador = 1;
        int acumulador_heiht = 0;
        int top = 0;
        int i = 0;
        int columnas = 4;
        int separacion = 3;
        int width = panel_botones_ordenes.getWidth() / columnas;
        width = width - separacion;
        int heiht = 200;

        Component[] lista_componentes = panel_botones_ordenes.getComponents();
        eliminar_botones();
        try {
            for (Component componente : lista_componentes) {
                if (contador == 1 && i == 0) {
                    panel_botones_ordenes.add(componente, new AbsoluteConstraints(0, 0, width, heiht));
                    acumulador_heiht += width + separacion;
                } else {
                    panel_botones_ordenes.add(componente, new AbsoluteConstraints(acumulador_heiht, top, width, heiht));
                    acumulador_heiht += width + separacion;
                }

                if (contador == columnas) {
                    contador = 1;
                    acumulador_heiht = 0;
                    top += heiht;
                } else {
                    contador++;
                }
                i++;

                panel_botones_ordenes.repaint();
                panel_botones_ordenes.revalidate();
            }

        } catch (Exception ex) {
            System.err.println("Punto Venta => addBotonesProductosPorCategorias => " + ex.getMessage());
        }

    }
}
