/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cuenta_por_cobrar;

import FuncionesGenerales.Dao;
import FuncionesGenerales.Funciones;
import FuncionesGenerales.Render;
import FuncionesGenerales.WebServices;
import com.mycompany.menube_app.formularios.FrmLogin;
import com.mycompany.menube_app.formularios.FrmOutBuscarClientes;
import com.mycompany.menube_app.formularios.FrmOutValor;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class FrmRecibos extends javax.swing.JDialog {

    /**
     * Creates new form FrmRecibos
     */
    Funciones funciones = new Funciones();
    WebServices webServices = new WebServices();
    private String idcliente = "0";

    public FrmRecibos() {
        initComponents();
        reorganizarTabla();
        llenar();
        funciones.addNumberFieldFloat(txtMontoPagar);
         //btnReimprimir.setVisible(false);
    }

    public FrmRecibos(JFrame parent, Boolean modal) {
        super(parent, modal);
        initComponents();
        reorganizarTabla();
        llenar();
        funciones.addNumberFieldFloat(txtMontoPagar);
       // btnReimprimir.setVisible(false);
    }

//    public FrmRecibos(JFrame parent, Boolean modal) {
//        super(parent, modal);
//        initComponents();
//        reorganizarTabla();
//        llenar();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDireccion = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        txtMontoTotal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMontoPagar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_datos = new javax.swing.JTable();
        btnBuscarClientes = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnReimprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(64, 149, 191));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Recibo Cuentas Por Cobrar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(588, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setText("Nombre :");

        txtNombre.setEditable(false);
        txtNombre.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setText("Direcci√≥n :");

        txtDireccion.setEditable(false);
        txtDireccion.setColumns(20);
        txtDireccion.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtDireccion.setLineWrap(true);
        txtDireccion.setRows(5);
        txtDireccion.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtDireccion);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setText("Monto Total :");

        txtMontoTotal.setEditable(false);
        txtMontoTotal.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel5.setText("Monto a Pagar :");

        txtMontoPagar.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtMontoPagar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMontoPagarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMontoPagarKeyReleased(evt);
            }
        });

        tabla_datos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tabla_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "#FACTURA", "FECHA", "MONTO", "BALANCE", "A PAGAR", "CONCEPTO", "ABONAR", "SALDAR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_datosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla_datos);

        btnBuscarClientes.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        btnBuscarClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/if_search_173095.png"))); // NOI18N
        btnBuscarClientes.setText("Buscar Cliente");
        btnBuscarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClientesActionPerformed(evt);
            }
        });

        btnSalvar.setBackground(new java.awt.Color(0, 204, 102));
        btnSalvar.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salvar.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnNuevo.setBackground(new java.awt.Color(102, 204, 255));
        btnNuevo.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(255, 0, 0));
        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnReimprimir.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        btnReimprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/report.png"))); // NOI18N
        btnReimprimir.setText("Reimprimir");
        btnReimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReimprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel1))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMontoPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscarClientes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnReimprimir)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jLabel5)
                    .addComponent(txtMontoPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:
        eventoSalvar();
    }//GEN-LAST:event_btnSalvarActionPerformed
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        eventoNuevo();
    }//GEN-LAST:event_btnNuevoActionPerformed
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
//        // TODO add your handling code here:
//        if (funciones.mensajeConfirmacion("Desea Salir del sistema", "", JOptionPane.YES_NO_OPTION) == 1) {
//            return;
//        }
//        String respuesta = "";
//        try {
//            respuesta = webServices.buscar("", "logout");
//            if (!respuesta.equals("")) {
//            }
//        } catch (Exception e) {
//            System.err.println("Error en salir punto venta en el metodo logout" + e.getMessage());
//        }
//        dispose();
//        FrmLogin login = new FrmLogin();
//        login.setVisible(true);
//        login.setTitle("Login de Usuario");
//        login.getContentPane().setBackground(new Color(64, 149, 191));
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void tabla_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_datosMouseClicked
        // TODO add your handling code here:

        if (evt.getClickCount() == 1) {
            int column = tabla_datos.getColumnModel().getColumnIndexAtX(evt.getX());
            int row = evt.getY() / tabla_datos.getRowHeight();
            if (tabla_datos.getSelectedRow() != -1) {
                Object value = tabla_datos.getValueAt(row, column);
                if (value instanceof JButton) {
                    ((JButton) value).doClick();
                    JButton boton = (JButton) value;
                    if (boton.getName().equals("abonar")) {
                        FrmOutValor frmvaOutValor = new FrmOutValor((JFrame) this.getParent(), true);
                        frmvaOutValor.setVisible(true);
                        frmvaOutValor.addWindowListener(new WindowListener() {
                            @Override
                            public void windowOpened(WindowEvent e) {
                            }

                            @Override
                            public void windowClosing(WindowEvent e) {
                            }

                            @Override
                            public void windowClosed(WindowEvent e) {
                                eventoAbono(funciones.parseDouble(frmvaOutValor.getValor()));
                            }

                            @Override
                            public void windowIconified(WindowEvent e) {
                            }

                            @Override
                            public void windowDeiconified(WindowEvent e) {
                            }

                            @Override
                            public void windowActivated(WindowEvent e) {
                            }

                            @Override
                            public void windowDeactivated(WindowEvent e) {
                            }
                        });
                    }
                    if (boton.getName().equals("saldar")) {
                        eventoSaldar();
                    }
                }

            }
        }

    }//GEN-LAST:event_tabla_datosMouseClicked

    private void btnBuscarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClientesActionPerformed
        // TODO add your handling code here:

        FrmOutBuscarClientes frm = new FrmOutBuscarClientes((JFrame) this.getParent(), true);
        frm.setVisible(true);
        frm.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosing(WindowEvent e) {
            }

            @Override
            public void windowClosed(WindowEvent e) {
                String id = frm.getIdcliente();
                idcliente = id;
                eventoBuscarCuentasAndCliente();
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
    }//GEN-LAST:event_btnBuscarClientesActionPerformed

    private void txtMontoPagarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoPagarKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtMontoPagarKeyPressed

    private void txtMontoPagarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMontoPagarKeyReleased
        // TODO add your handling code here:
        Distribuir();

    }//GEN-LAST:event_txtMontoPagarKeyReleased

    private void btnReimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReimprimirActionPerformed
        // TODO add your handling code here:
        FrmReimprimirRecibo frmReimprimirRecibo = new FrmReimprimirRecibo((JFrame)this.getParent(),true);
        frmReimprimirRecibo.setVisible(true);
    }//GEN-LAST:event_btnReimprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRecibos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRecibos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRecibos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRecibos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmRecibos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarClientes;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReimprimir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla_datos;
    private javax.swing.JTextArea txtDireccion;
    private javax.swing.JTextField txtMontoPagar;
    private javax.swing.JTextField txtMontoTotal;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    public void llenar() {
        DefaultTableModel model = (DefaultTableModel) tabla_datos.getModel();
//        Object[] dato = new Object[]{
//            "1",
//            "FC0000",
//            "FC0000",
//            "FC0000",
//            "FC0000",
//            "FC0000",
//            "FC0000",
//            abonar,
//            saldar
//        };
//        model.addRow(dato);
    }

    public void reorganizarTabla() {
        tabla_datos.setDefaultRenderer(Object.class, new Render());
        tabla_datos.removeColumn(tabla_datos.getColumnModel().getColumn(0));
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        tabla_datos.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        tabla_datos.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        tabla_datos.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        tabla_datos.getTableHeader().setFont(new Font("Tahoma", 1, 16));
        tabla_datos.setRowHeight(40);
    }

    public void eventoSalir() {
        dispose();
    }

    public void eventoSalvar() {

        if (idcliente.equals("") || idcliente.equals("0")) {
            funciones.mensaje("Selecicone el cliente", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (eventoValidarCuentas() == true) {
            funciones.mensaje("Existen cuentas que fueron alteradas por otro proceso, se recargaran las cuentas", "Aviso", JOptionPane.WARNING_MESSAGE);
            txtMontoPagar.setText("");
            eventoBuscarCuentasAndCliente();
            return;
        } else {
            String aplicado = "";
            String concepto = "";
            Double total = 0.00;
            DefaultTableModel model = ((DefaultTableModel) tabla_datos.getModel());
            if (tabla_datos.getRowCount() > 1) {

                for (int i = 0; i < tabla_datos.getRowCount(); i++) {
                    if (funciones.parseDouble(model.getValueAt(i, 5).toString()) > 0) {
                        aplicado += model.getValueAt(i, 1).toString() + "," + model.getValueAt(i, 5).toString() + ";";
                        concepto += model.getValueAt(i, 6).toString() + " a Factura " + model.getValueAt(i, 1).toString() + ",";
                        total += funciones.parseDouble(model.getValueAt(i, 5).toString());
                    }
                }
                aplicado = aplicado.substring(0, aplicado.length() - 1);
                concepto = concepto.substring(0, concepto.length() - 1);
            } else {
                aplicado = model.getValueAt(0, 1).toString();
                concepto = model.getValueAt(0, 6).toString() + " a Factura " + model.getValueAt(0, 1).toString();
                total = funciones.parseDouble(model.getValueAt(0, 5).toString());

            }

            String detalle = "[";

            for (int i = 0; i < tabla_datos.getRowCount(); i++) {
                if (funciones.parseDouble(model.getValueAt(i, 5).toString()) > 0.00) {
                    detalle += "{"
                            + "\"f_idrecord\":\"" + model.getValueAt(i, 0) + "\","
                            + "\"f_concepto\":\"" + model.getValueAt(i, 6) + "\","
                            + "\"f_monto\":\"" + funciones.parseDouble(model.getValueAt(i, 5).toString()) + "\"},";
                }

            }
            detalle += "]";
            detalle = detalle.replace("},]", "}]");
            
            String json = "{"
                    + "\"f_idcliente\":\"" + idcliente + "\","
                    + "\"f_aplicado\":\"" + aplicado + "\","
                    + "\"f_concepto\":\"" + concepto + "\","
                    + "\"f_total\":\"" + funciones.parseDouble(txtMontoPagar.getText()) + "\","
                    + "\"f_detalle\":" + detalle + "}";

            Map map;
            String respuesta = "";
            try {
                respuesta = webServices.buscar("\"f_recibo\":" + json, "cxc/set_salvar_recibo");
                if (!respuesta.equals("")) {
                    map = funciones.JsonToMap(respuesta);

                    String[] data = map.get("f_data").toString().split("-");
                    if (data[0].equals("true")) {
                        funciones.mensaje("Datos Guardados Correctamente", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        eventoImprimir(data[1], 1);
                        btnNuevo.doClick();
                    }
                }
            } catch (Exception e) {
                System.err.println("Punto Salvar Recibo Cuentas Por Cobrar  ==>eventoSalvar ==> " + e.getMessage());

            }

        }

    }

    public void eventoImprimir(String id, int tipo) {
        String json = "";
        try {
            String tipo_impresion = "RECIBO PAGO";

            Dao dao = new Dao();
            String respuesta = "";
            respuesta = webServices.buscar("\"f_idrecord\":" + id, "cxc/get_imprimir_recibos");
            if (!respuesta.equals("")) {
                //papel Matricial
                if (dao.getTipo_papel().equals("1")) {

                    funciones.GenerarStringReciboImprimirTermica(respuesta, dao.getTipo_printer(), tipo_impresion);

                }//papel termico
                else if (dao.getTipo_papel().equals("2")) {

                    funciones.GenerarStringReciboImprimirTermica(respuesta, dao.getTipo_printer(), tipo_impresion);
                }
            }

        } catch (Exception ex) {
            System.err.println("Impresion Recibo=> evento Imprimir => " + ex.getMessage());
        }

    }

    public void eventoNuevo() {

        // eventoImprimir("6", 1);
        idcliente = "0";
        txtNombre.setText("");
        txtDireccion.setText("");
        txtMontoPagar.setText("");
        txtMontoTotal.setText("");
        funciones.eliminar_tabla(tabla_datos);
        btnBuscarClientes.requestFocus();

    }

    public void eventoBuscarCuentasAndCliente() {

        funciones.eliminar_tabla(tabla_datos);
        Map map;
        Map map_cliente;
        List<Map<String, Object>> map1;
        String respuesta = "";
        try {
            // ((GridBagLayout) panel_camareros.getLayout()).
            respuesta = webServices.buscar("\"f_idrecord\":\"" + idcliente + "\"", "cxc/get_cuentas_por_cobrar_clientes");
            if (!respuesta.equals("")) {
                map = (Map) funciones.JsonToMap(respuesta).get("f_data");
                map_cliente = ((List<Map<String, Object>>) map.get("f_cliente")).get(0);
                txtNombre.setText(map_cliente.get("f_nombre").toString() + " " + map_cliente.get("f_apellido").toString());
                txtDireccion.setText(map_cliente.get("f_direccion").toString());
                map1 = funciones.JsonToListMap(map.get("f_cuentas"));
                for (Map tupla : map1) {
                    DefaultTableModel model = (DefaultTableModel) tabla_datos.getModel();
                    JButton saldar = new JButton("Saldar");
                    saldar.setName("saldar");
                    JButton abonar = new JButton("Abonar");
                    abonar.setName("abonar");
                    model.addRow(new Object[]{
                        tupla.get("f_idrecord"),
                        tupla.get("f_numero"),//nombre cliente
                        tupla.get("f_fecha"),//apellido del cliente
                        funciones.Round(tupla.get("f_monto").toString(), 2),//apellido del cliente
                        funciones.Round(tupla.get("f_balance").toString(), 2),//apellido del cliente
                        "",//MONTO PAGAR
                        "",//MONTO PAGADO
                        abonar,
                        saldar

                    });
                }
                
                
                CalcularTotal();
                txtMontoPagar.requestFocus();
            }
            
           
        } catch (Exception ex) {
            //ex.printStackTrace();
            System.err.println(ex.getMessage());
        }
    }

    public void Distribuir() {
        Double a = 0.00;

        if (!txtMontoPagar.getText().equals("")) {
            a = funciones.parseDouble(txtMontoPagar.getText());
        }
        DefaultTableModel model = ((DefaultTableModel) tabla_datos.getModel());
        for (int i = 0; i < tabla_datos.getRowCount(); i++) {
            Double t = 0.00;
            if (a == 0) {
                model.setValueAt("0.00", i, 5);
                model.setValueAt("No Acci√≥n", i, 6);
            } else {
                if (a >= funciones.parseDouble(model.getValueAt(i, 4).toString()) && a >= funciones.parseDouble(model.getValueAt(i, 4).toString()) - 1) {

                    model.setValueAt(funciones.Round(model.getValueAt(i, 4).toString(), 2), i, 5);
                    t = funciones.parseDouble(model.getValueAt(i, 4).toString());
                    model.setValueAt("Saldado", i, 6);
                    a = a - t;
                } else if (a < funciones.parseDouble(model.getValueAt(i, 4).toString()) && a > 0) {
                    model.setValueAt(funciones.Round(a, 2), i, 5);
                    model.setValueAt("Abono", i, 6);
                    a = 0.00;
                }
            }

        }

    }

    public void CalcularTotal() {
        Double _total = 0.00;
        DefaultTableModel model = ((DefaultTableModel) tabla_datos.getModel());
        for (int i = 0; i < tabla_datos.getRowCount(); i++) {
            _total += funciones.parseDouble(model.getValueAt(i, 4).toString());
        }
        txtMontoTotal.setEditable(true);
        txtMontoTotal.setText(funciones.Round(_total, 2));
        txtMontoTotal.setEditable(false);
    }

    public void checkValorApagarTabla() {
        Double _total = 0.00;
        DefaultTableModel model = ((DefaultTableModel) tabla_datos.getModel());
        for (int i = 0; i < tabla_datos.getRowCount(); i++) {
            _total += funciones.parseDouble(model.getValueAt(i, 5).toString());
        }
        txtMontoPagar.setText(funciones.Round(_total, 2));
    }

    public void eventoAbono(Double monto) {
        if (monto.equals("") || monto == null) {
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) tabla_datos.getModel();
            Double balance = funciones.parseDouble(model.getValueAt(tabla_datos.getSelectedRow(), 4).toString());
            if (monto > balance) {
                funciones.mensaje("No se puede abonar mas que el balance de la cuenta", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                if (Objects.equals(monto, balance)) {
                    model.setValueAt(funciones.Round(monto, 2), tabla_datos.getSelectedRow(), 5);
                    model.setValueAt("Saldado", tabla_datos.getSelectedRow(), 6);
                } else {
                    if (monto == 0.00) {
                        model.setValueAt(funciones.Round(monto, 2), tabla_datos.getSelectedRow(), 5);
                        model.setValueAt("No Acci√≥n", tabla_datos.getSelectedRow(), 6);
                    } else {
                        model.setValueAt(funciones.Round(monto, 2), tabla_datos.getSelectedRow(), 5);
                        model.setValueAt("Abono", tabla_datos.getSelectedRow(), 6);
                    }
                }
            }
        }
        checkValorApagarTabla();
    }

    public void eventoSaldar() {
        DefaultTableModel model = (DefaultTableModel) tabla_datos.getModel();
        Double balance = funciones.parseDouble(model.getValueAt(tabla_datos.getSelectedRow(), 4).toString());
        model.setValueAt(funciones.Round(balance, 2), tabla_datos.getSelectedRow(), 5);
        model.setValueAt("Saldado", tabla_datos.getSelectedRow(), 6);
        checkValorApagarTabla();
    }

    public Boolean eventoValidarCuentas() {

        Boolean valor = false;
        DefaultTableModel model = ((DefaultTableModel) tabla_datos.getModel());
        for (int i = 0; i < tabla_datos.getRowCount(); i++) {

            double _balance = 0.00;
            String id = model.getValueAt(i, 0).toString();
            _balance = funciones.parseDouble(model.getValueAt(i, 4).toString());
            String respuesta = "";
            Map map;
            try {
                // ((GridBagLayout) panel_camareros.getLayout()).
                respuesta = webServices.buscar("\"f_idrecord\":\"" + id + "\"", "cxc/get_cuentas_por_cobrar_balance");
                if (!respuesta.equals("")) {
                    map = (Map) funciones.JsonToMap(respuesta);
                    double _monto = funciones.parseDouble(map.get("f_data").toString());
                    if (_monto != _balance) {
                        valor = true;
                    }
                }

            } catch (Exception ex) {
                System.err.println(ex.getMessage());
            }

        }
        return valor;

    }

}
